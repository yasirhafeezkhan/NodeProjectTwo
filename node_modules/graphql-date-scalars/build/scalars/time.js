"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeScalar = void 0;
const utils_1 = require("../utils");
const type_guards_1 = require("../utils/type-guards");
const types_1 = require("../utils/types");
/**
 * An RFC 3339 compliant time scalar.
 *
 * Input:
 *    This scalar takes an RFC 3339 time string as input and
 *    parses it to a javascript Date (with a year-month-day relative
 *    to the current day).
 *
 * Output:
 *    This scalar serializes javascript Dates and
 *    to RFC 3339 UTC time strings.
 */
const timeScalar = new types_1.GraphQLDateScalarType({
    name: 'Time',
    description: 'A time string at UTC, such as 10:15:30Z, compliant with ' +
        'the `full-time` format outlined in section 5.6 of the RFC 3339' +
        'profile of the ISO 8601 standard for representation of dates and ' +
        'times using the Gregorian calendar.',
    serialize(value) {
        if (!(value instanceof Date)) {
            throw new TypeError('Time cannot represent non-date type');
        }
        if ((0, utils_1.validateJSDate)(value)) {
            return (0, utils_1.serializeTime)(value);
        }
        throw new TypeError('Time cannot represent an invalid Date instance');
    },
    parseValue(value) {
        if (typeof value !== 'string') {
            throw new TypeError(`Time cannot represent non string type ${JSON.stringify(value)}`);
        }
        if ((0, utils_1.validateTime)(value)) {
            return (0, utils_1.parseTime)(value);
        }
        throw new TypeError(`Time cannot represent an invalid time-string ${value}.`);
    },
    parseLiteral(ast) {
        if (!(0, type_guards_1.isStringValueNode)(ast)) {
            throw new TypeError(`Time cannot represent non string type ${ast.kind}`);
        }
        const value = ast.value;
        if ((0, utils_1.validateTime)(value)) {
            return (0, utils_1.parseTime)(value);
        }
        throw new TypeError(`Time cannot represent an invalid time-string ${String(value)}.`);
    },
});
exports.TimeScalar = timeScalar;
//# sourceMappingURL=time.js.map