"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateTimeScalar = void 0;
const utils_1 = require("../utils");
const type_guards_1 = require("../utils/type-guards");
const types_1 = require("../utils/types");
/**
 * An RFC 3339 compliant date-time scalar.
 *
 * Input:
 *    This scalar takes an RFC 3339 date-time string as input and
 *    parses it to a javascript Date.
 *
 * Output:
 *    This scalar serializes javascript Dates,
 *    to RFC 3339 UTC date-time strings.
 */
const dateTimeScalar = new types_1.GraphQLDateScalarType({
    name: 'DateTime',
    description: 'A date-time string at UTC, such as 2007-12-03T10:15:30Z, ' +
        'compliant with the `date-time` format outlined in section 5.6 of ' +
        'the RFC 3339 profile of the ISO 8601 standard for representation ' +
        'of dates and times using the Gregorian calendar.',
    serialize(value) {
        if (!(value instanceof Date)) {
            throw new TypeError('DateTime cannot represent non-date type');
        }
        if ((0, utils_1.validateJSDate)(value)) {
            return (0, utils_1.serializeDateTime)(value);
        }
        throw new TypeError('DateTime cannot represent an invalid Date instance');
    },
    parseValue(value) {
        if (typeof value !== 'string') {
            throw new TypeError(`DateTime cannot represent non string type ${JSON.stringify(value)}`);
        }
        if ((0, utils_1.validateDateTime)(value)) {
            return (0, utils_1.parseDateTime)(value);
        }
        throw new TypeError(`DateTime cannot represent an invalid date-time-string ${value}.`);
    },
    parseLiteral(ast) {
        if (!(0, type_guards_1.isStringValueNode)(ast)) {
            throw new TypeError(`DateTime cannot represent non string type ${ast.kind}`);
        }
        const { value } = ast;
        if ((0, utils_1.validateDateTime)(value)) {
            return (0, utils_1.parseDateTime)(value);
        }
        throw new TypeError(`DateTime cannot represent an invalid date-time-string ${String(value)}.`);
    },
});
exports.DateTimeScalar = dateTimeScalar;
//# sourceMappingURL=date-time.js.map