"use strict";
/* eslint-disable unicorn/prefer-string-slice */
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeDateTime = exports.parseDateTime = exports.serializeDate = exports.parseDate = exports.serializeTime = exports.parseTime = void 0;
// Parses an RFC 3339 compliant time-string into a Date.
// It does this by combining the current date with the time-string
// to create a new Date instance.
//
// Example:
// Suppose the current date is 2016-01-01, then
// parseTime('11:00:12Z') parses to a Date corresponding to
// 2016-01-01T11:00:12Z.
const parseTime = (time) => {
    const currentDateString = new Date().toISOString();
    return new Date(currentDateString.substr(0, currentDateString.indexOf('T') + 1) + time);
};
exports.parseTime = parseTime;
// Serializes a Date into an RFC 3339 compliant time-string in the
// format hh:mm:ss.sssZ.
const serializeTime = (date) => {
    const dateTimeString = date.toISOString();
    return dateTimeString.substr(dateTimeString.indexOf('T') + 1);
};
exports.serializeTime = serializeTime;
// Parses an RFC 3339 compliant date-string into a Date.
//
// Example:
// parseDate('2016-01-01') parses to a Date corresponding to
// 2016-01-01T00:00:00.000Z.
const parseDate = (date) => {
    return new Date(date);
};
exports.parseDate = parseDate;
// Serializes a Date into a RFC 3339 compliant date-string
// in the format YYYY-MM-DD.
const serializeDate = (date) => {
    return date.toISOString().split('T')[0];
};
exports.serializeDate = serializeDate;
// Parses an RFC 3339 compliant date-time-string into a Date.
const parseDateTime = (dateTime) => {
    return new Date(dateTime);
};
exports.parseDateTime = parseDateTime;
// Serializes a Date into an RFC 3339 compliant date-time-string
// in the format YYYY-MM-DDThh:mm:ss.sssZ.
const serializeDateTime = (dateTime) => {
    return dateTime.toISOString();
};
exports.serializeDateTime = serializeDateTime;
//# sourceMappingURL=formatter.js.map